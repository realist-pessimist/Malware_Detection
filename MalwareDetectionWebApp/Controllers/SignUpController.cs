using System;
using System.Collections.Generic;
using System.IdentityModel.Tokens.Jwt;
using System.Linq;
using System.Security.Claims;
using System.Threading.Tasks;
using MalwareDetectionWebApp.Data;
using MalwareDetectionWebApp.DTO;
using MalwareDetectionWebApp.Models;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.IdentityModel.Tokens;

namespace MalwareDetectionWebApp.Controllers
{
    [ApiController]
    [Route("signUp")]
    public class SignUpController : ControllerBase
    {
        private readonly UserManager<User> _userManager;
        private readonly RoleManager<IdentityRole<int>> _roleManager;
        private readonly ApplicationDbContext _context;
        public SignUpController(UserManager<User> userManager, RoleManager<IdentityRole<int>> roleManager, ApplicationDbContext context)
        {
            _userManager = userManager;
            _roleManager = roleManager;
            _context = context;
        }

        [AllowAnonymous]
        [HttpPost]
        [Route("")]
        public async Task<ActionResult> Post([FromBody] RegistrationDTO registrationDTO)
        {
            var user = await _userManager.FindByEmailAsync(registrationDTO.Email);
            if (!(user is null))
            {
                return BadRequest();
            }

            user = new User
            {
                Email = registrationDTO.Email,
                UserName = registrationDTO.Email,
                Name = registrationDTO.Name,
                EmailConfirmed = true,
                PhoneNumber = registrationDTO.Phone
            };
            var createResult = await _userManager.CreateAsync(user, registrationDTO.Password);
            if (!createResult.Succeeded)
            {
                return BadRequest();
            }

            var addToRoleResult = await
                _userManager.AddToRoleAsync(user, "user");
            _context.Subscriptions.Add(new Subscription
            {
                Expires = DateTime.Now + TimeSpan.FromDays(31),
                ClientId = user.Id,
                IsActive = true,
                UpdatedAt = DateTime.Now,
                CreatedAt = DateTime.Now,
                SubscriptionTypeId = _context.SubscriptionTypes.FirstOrDefaultAsync(x => x.Name == "default").Id
            });
            if (!addToRoleResult.Succeeded)
            {
                return BadRequest();
            }
            var token = await Token(new AuthClaimsDTO{Login = registrationDTO.Email, Password = registrationDTO.Password});
            return Ok(token);
        }
        
        [HttpPost("login")]
        public async Task<IActionResult> Token([FromBody] AuthClaimsDTO request)
        {
            var identity = await GetIdentity(request.Login, request.Password);
            if (identity == null)
            {
                return BadRequest(new
                {
                    errorText = "Invalid username or password."
                });
            }

            var now = DateTime.UtcNow;
            // создаем JWT-токен
            var jwt = new JwtSecurityToken(
                issuer: AuthOptions.ISSUER,
                audience: AuthOptions.AUDIENCE,
                notBefore: now,
                claims: identity.Claims,
                expires: now.Add(TimeSpan.FromMinutes(AuthOptions.LIFETIME)),
                signingCredentials: new SigningCredentials(AuthOptions.GetSymmetricSecurityKey(),
                    SecurityAlgorithms.HmacSha256));
            var encodedJwt = new JwtSecurityTokenHandler().WriteToken(jwt);
            var response = new
            {
                accessToken = encodedJwt,
                role = identity.Claims.First(c => c.Type == ClaimsIdentity.DefaultRoleClaimType).Value
            };
            return new JsonResult(response);
        }
        private async Task<ClaimsIdentity> GetIdentity(string email, string password)
        {
            var user =  await _userManager.FindByEmailAsync(email);
            // добавляем пользователя
            var result = await _userManager.CheckPasswordAsync(user, password);
            if (user != null && result)
            {
                var role = await _userManager.GetRolesAsync(user);
                var claims = new List<Claim>
                {
                    new Claim(ClaimsIdentity.DefaultNameClaimType, user.Email),
                    new Claim(ClaimsIdentity.DefaultRoleClaimType, role.First()),
                };
                ClaimsIdentity claimsIdentity =
                    new ClaimsIdentity(claims,
                        "Token",
                        ClaimsIdentity.DefaultNameClaimType,
                        ClaimsIdentity.DefaultRoleClaimType);
                return claimsIdentity;
            }

            // если пользователя не найдено
            return null;
        }
    }
}