using System;
using System.Linq;
using System.Collections.Generic;
using MalwareDetectionWebApp.Data;
using MalwareDetectionWebApp.DTO;
using MalwareDetectionWebApp.Models;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;


namespace MalwareDetectionWebApp.Controllers
{
    [ApiController]
    [Route("statistic")]
    public class StatisticController : ControllerBase
    {
        private readonly ApplicationDbContext _context;

        public StatisticController(ApplicationDbContext context)
        {
            _context = context;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [HttpGet]
        [Route("list")]
        public ActionResult<List<StatisticDTO>> GetList([FromQuery] int? userId)
        {
            var statisticDTOList = new List<StatisticDTO>();
            var statisticDataListQuery = _context.StatisticData.AsQueryable();

            statisticDataListQuery = userId is null
                ? statisticDataListQuery.Where(x => x.IsGlobal)
                : statisticDataListQuery.Where(x => x.UserId == userId);
                  
            List<StatisticData> statisticDataList = statisticDataListQuery.ToList();
            // var result = statisticDataList.Join(_context.Malwares.ToList(), 
            //     s => s,
            //     m => m,
            //     (s, m) => new StatisticData
            //     {
            //         Id = s.Id,
            //         Count = s.Count,
            //         CreatedAt = s.CreatedAt,
            //         UpdatedAt = s.UpdatedAt,
            //         MalwareId = s.MalwareId,
            //         Malware = m,
            //         IsGlobal = s.IsGlobal,
            //         User = s.User,
            //         UserId = s.UserId
            //     }).ToList();
            foreach (var statisticData in statisticDataList)
            {
                statisticDTOList.Add(new StatisticDTO
                {
                    Count = statisticData.Count,
                    Date = new DateTime(Math.Max(statisticData.CreatedAt.Ticks, statisticData.UpdatedAt.Ticks)),
                    MalwareId = statisticData.MalwareId,
                    MalwareName = _context.Malwares.FirstOrDefault(x => x.Id == statisticData.MalwareId).Name,
                });
            }
            return Ok(statisticDTOList);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [HttpGet]
        [Route("")]
        public ActionResult<StatisticDTO> Get([FromQuery] int? userId, [FromQuery] int malwareId = 0)
        {
            var statisticDataQuery = _context.StatisticData.AsQueryable();
            statisticDataQuery = userId is null
                ? statisticDataQuery.Where(x => x.IsGlobal && x.MalwareId == malwareId)
                : statisticDataQuery.Where(x => x.UserId == userId && x.MalwareId == malwareId);
            var statisticData = statisticDataQuery.FirstOrDefault();
            if (statisticData is null)
            {
                return NotFound();
            }

            var statisticDTO = new StatisticDTO
            {
                Count = statisticData.Count,
                Date = new DateTime(Math.Max(statisticData.CreatedAt.Ticks, statisticData.UpdatedAt.Ticks)),
                MalwareId = statisticData.MalwareId,
                MalwareName = statisticData.Malware.Name,
            };

            return Ok(statisticDTO);
        }
    }
}