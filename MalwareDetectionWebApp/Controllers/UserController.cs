using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using MalwareDetectionWebApp.DTO;
using MalwareDetectionWebApp.Models;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;

namespace MalwareDetectionWebApp.Controllers
{
    [Authorize(AuthenticationSchemes = JwtBearerDefaults.AuthenticationScheme)]
    [Authorize(Roles = "admin")]
    [ApiController]
    [Route("user")]
    public class UserController : ControllerBase
    {
        private readonly UserManager<User> _userManager;
        private readonly RoleManager<IdentityRole<int>> _roleManager;

        public UserController(UserManager<User> userManager, RoleManager<IdentityRole<int>> roleManager)
        {
            _userManager = userManager;
            _roleManager = roleManager;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [HttpGet]
        [Route("list")]
        public async Task<ActionResult<List<UserDTO>>> GetList()
        {
            List<Models.User> users = _userManager.Users.ToList();
            List<UserDTO> userDTOList = new List<UserDTO>();
            foreach (var user in users)
            {
                string userRole = (await _userManager.GetRolesAsync(user)).FirstOrDefault();
                userDTOList.Add(new UserDTO
                {
                    Id = user.Id,
                    Email = user.Email,
                    Phone = user.PhoneNumber,
                    Name = user.Name,
                    Role = userRole
                });
            }

            return Ok(userDTOList);
        }

        [HttpGet]
        [Route("")]
        public async Task<ActionResult<UserDTO>> Get([FromQuery] int id = 0)
        {
            User user = await _userManager.FindByIdAsync(id.ToString());
            if (user == null)
            {
                return NotFound();
            }

            string userRole = (await _userManager.GetRolesAsync(user)).FirstOrDefault();
            UserDTO userDto = new UserDTO
            {
                Id = user.Id,
                Name = user.Name,
                Email = user.Email,
                Phone = user.PhoneNumber,
                Role = userRole
            };
            return Ok(userDto);
        }

        [HttpPost]
        [Route("")]
        public async Task<ActionResult> Post([FromForm] CreateUserDTO createUserDTO)
        {
            var user = new User
            {
                Email = createUserDTO.Email, 
                UserName = createUserDTO.Email,
                Name = createUserDTO.Name,
                EmailConfirmed = true,
                PhoneNumber = createUserDTO.Phone
            };
            var createResult = await _userManager.CreateAsync(user, createUserDTO.Password);
            if (!createResult.Succeeded)
            {
                return BadRequest();
            }
            if (!string.IsNullOrEmpty(createUserDTO.Role))
            {
                var role = _roleManager.Roles.FirstOrDefault(x => x.Name == createUserDTO.Role);
                if (role is null)
                {
                    return BadRequest();
                }
                var addToRoleResult = await _userManager.AddToRoleAsync(user, role.Name);
                if (!addToRoleResult.Succeeded)
                {
                    return BadRequest();
                }
            }
            return Ok();
        }

        [HttpPut]
        [Route("")]
        public async Task<ActionResult> Put([FromBody] EditUserDTO editUserDTO)
        {
            var user = await _userManager.FindByIdAsync(editUserDTO.Id.ToString());
            if (user is null)
            {
                return BadRequest();
            }

            user.Name = editUserDTO.Name;
            user.Email = editUserDTO.Email;
            user.PhoneNumber = editUserDTO.Phone;
            var updateResult = await _userManager.UpdateAsync(user);
            if (!updateResult.Succeeded)
            {
                return BadRequest();
            }

            if (!string.IsNullOrEmpty(editUserDTO.Role))
            {
                var role = _roleManager.Roles.FirstOrDefault(x => x.Name == editUserDTO.Role);
                if (role is null)
                {
                    return BadRequest();
                }
                var addToRoleResult = await _userManager.AddToRoleAsync(user, role.Name);
                if (!addToRoleResult.Succeeded)
                {
                    return BadRequest();
                }
            }
            return Ok();
        }

        [HttpDelete]
        [Route("")]
        public async Task<ActionResult> Delete([FromQuery] int id = 0)
        {
            User user = await _userManager.FindByIdAsync(id.ToString());
            if (user == null)
            {
                return NotFound();
            }

            var deleteResult = await _userManager.DeleteAsync(user);
            if (!deleteResult.Succeeded)
            {
                return BadRequest();
            }

            return Ok();
        }
    }
}