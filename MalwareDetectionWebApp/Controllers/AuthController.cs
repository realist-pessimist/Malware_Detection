using System.Linq;
using System.Threading.Tasks;
using MalwareDetectionWebApp.DTO;
using MalwareDetectionWebApp.Models;
using MalwareDetectionWebApp.Services;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Mvc;

namespace MalwareDetectionWebApp.Controllers
{
    [Authorize(AuthenticationSchemes = JwtBearerDefaults.AuthenticationScheme)]
    [Route("auth")]
    [ApiController]
    public class AuthController : ControllerBase
    {
        private readonly UserManager<User> _userManager;
        private readonly SignInManager<User> _signInManager;
        private readonly ITokenService _tokenService;

        public AuthController(UserManager<User> userManager, SignInManager<User> signInManager,
            ITokenService tokenService)
        {
            _userManager = userManager;
            _signInManager = signInManager;
            _tokenService = tokenService;
        }

        [AllowAnonymous]
        [HttpPost]
        [Route("login")]
        public async Task<IActionResult> LogIn([FromBody] AuthClaimsDTO authClaimsDto)
        {
            var user = await _userManager.FindByNameAsync(authClaimsDto.Login);
            var role = (await _userManager.GetRolesAsync(user)).First();
            if (user == null || !await _userManager.CheckPasswordAsync(user, authClaimsDto.Password))
            {
                return Unauthorized();
            }

            var authClaims = _tokenService.CreateAuthClime(user.UserName, role);

            var refreshToken = _tokenService.GenerateRefreshToken();

            var accessToken = _tokenService.GenerateAccessToken(authClaims);

            user.RefreshToken = refreshToken;
            await _userManager.UpdateAsync(user);


            return Ok(new AuthTokenDTO()
            {
                RefreshToken = refreshToken,
                AccessToken = accessToken
            });
        }


        [HttpGet]
        [Route("logout")]
        public IActionResult LogOut()
        {
            return Ok();
        }
    }
}