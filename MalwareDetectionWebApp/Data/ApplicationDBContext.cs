using System.Linq;
using MalwareDetectionWebApp.Models;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace MalwareDetectionWebApp.Data
{
    /// <summary>
    /// DataBase adapter with custom Identity
    /// </summary>
    public class ApplicationDbContext : IdentityDbContext<User, IdentityRole<int>, int,
        IdentityUserClaim<int>, IdentityUserRole<int>, IdentityUserLogin<int>, IdentityRoleClaim<int>,
        IdentityUserToken<int>>
    {
        public DbSet<Malware> Malwares { get; set; }
        public DbSet<Payment> Payments { get; set; }
        public DbSet<PaymentStatus> PaymentStatuses { get; set; }
        public DbSet<StatisticData> StatisticData { get; set; }
        public DbSet<Subscription> Subscriptions { get; set; }
        public DbSet<SubscriptionType> SubscriptionTypes { get; set; }


        /// <summary>
        /// constructor with auto generate database
        /// </summary>
        /// <param name="options"></param>
        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) : base(options)
        {
            // base.Database.EnsureCreated();

            if (!PaymentStatuses.Any())
            {
                PaymentStatuses.Add(new PaymentStatus()
                {
                    Name = "success"
                });
                PaymentStatuses.Add(new PaymentStatus()
                {
                    Name = "rejected"
                });
                base.SaveChanges();
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);
            modelBuilder.UseIdentityColumns();
            modelBuilder.HasAnnotation("Npgsql:ValueGenerationStrategy",
                NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            #region Identity models builders

            modelBuilder.Entity<User>().ToTable("User", "identity");
            modelBuilder.Entity<IdentityRole<int>>().ToTable("Role", "identity");
            modelBuilder.Entity<IdentityUserClaim<int>>().ToTable("UserClaim", "identity");
            modelBuilder.Entity<IdentityRoleClaim<int>>().ToTable("RoleClaim", "identity");

            modelBuilder.Entity<IdentityUserLogin<int>>().ToTable("UserLogin", "identity");
            modelBuilder.Entity<IdentityUserRole<int>>().ToTable("UserRole", "identity");
            modelBuilder.Entity<IdentityUserToken<int>>().ToTable("UserToken", "identity");

            #endregion

            modelBuilder.Entity<Models.Malware>(entity =>
            {
                entity.ToTable("malware", "malwareDetection");
                entity.Property(e => e.Id)
                    .HasColumnType("int")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.HasKey(e => e.Id).HasName("malwarePK");

                entity.Property(e => e.Name).HasColumnName("name");
                entity.Property(e => e.Description).HasColumnName("description");
            });

            modelBuilder.Entity<Models.Payment>(entity =>
            {
                entity.ToTable("payment", "malwareDetection");
                entity.Property(e => e.Id)
                    .HasColumnType("int")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.HasKey(e => e.Id).HasName("paymentPK");

                entity.Property(e => e.Cost).HasColumnName("cost");

                entity.Property(e => e.StatusId).HasColumnName("statusId");
                entity.HasIndex(e => e.StatusId).HasName("idxPaymentPaymentStatus");
                entity.HasOne(e => e.PaymentStatus)
                    .WithMany(pt => pt.Payments)
                    .HasForeignKey(e => e.StatusId);

                entity.Property(e => e.SubscriptionId).HasColumnName("subscriptionId");
                entity.HasIndex(e => e.SubscriptionId).HasName("idxPaymentSubscription");
                entity.HasOne(e => e.Subscription)
                    .WithMany(pt => pt.Payments)
                    .HasForeignKey(e => e.SubscriptionId);

                entity.Property(e => e.UserId).HasColumnName("userId");
                entity.HasIndex(e => e.UserId).HasName("idxPaymentUser");
                entity.HasOne(e => e.User)
                    .WithMany(pt => pt.Payments)
                    .HasForeignKey(e => e.UserId);
            });

            modelBuilder.Entity<Models.PaymentStatus>(entity =>
            {
                entity.ToTable("paymentStatus", "malwareDetection");
                entity.Property(e => e.Id)
                    .HasColumnType("int")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.HasKey(e => e.Id).HasName("paymentStatusPK");

                entity.Property(e => e.Name).HasColumnName("name");
            });

            modelBuilder.Entity<Models.StatisticData>(entity =>
            {
                entity.ToTable("statisticData", "malwareDetection");
                entity.Property(e => e.Id)
                    .HasColumnType("int")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.HasKey(e => e.Id).HasName("statisticDataPK");

                entity.Property(e => e.Count).HasColumnName("count");
                entity.Property(e => e.CreatedAt).HasColumnName("createdAt");
                entity.Property(e => e.UpdatedAt).HasColumnName("updatedAt");
                entity.Property(e => e.IsGlobal).HasColumnName("isGlobal");

                entity.Property(e => e.MalwareId).HasColumnName("malwareId");
                entity.HasIndex(e => e.MalwareId).HasName("idxStatisticDataMalware");
                entity.HasOne(e => e.Malware)
                    .WithMany(pt => pt.StatisticDatas)
                    .HasForeignKey(e => e.MalwareId);
                
                entity.Property(e => e.UserId).HasColumnName("userId");
                entity.HasIndex(e => e.UserId).HasName("idStatisticDataUser");
                entity.HasOne(e => e.User)
                    .WithMany(pt => pt.StatisticData)
                    .HasForeignKey(e => e.UserId);
            });

            modelBuilder.Entity<Models.Subscription>(entity =>
            {
                entity.ToTable("subscription", "malwareDetection");
                entity.Property(e => e.Id)
                    .HasColumnType("int")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.HasKey(e => e.Id).HasName("subscriptionPK");

                entity.Property(e => e.Expires).HasColumnName("expires");
                entity.Property(e => e.IsActive).HasColumnName("isActive");

                entity.Property(e => e.CreatedAt).HasColumnName("createdAt");
                entity.Property(e => e.UpdatedAt).HasColumnName("updatedAt");

                entity.Property(e => e.ClientId).HasColumnName("clientId");
                entity.HasIndex(e => e.ClientId).HasName("idxSubscriptionUser");
                entity.HasOne(e => e.Client)
                    .WithMany(pt => pt.Subscriptions)
                    .HasForeignKey(e => e.ClientId);

                entity.Property(e => e.SubscriptionTypeId).HasColumnName("subscriptionTypeId");
                entity.HasIndex(e => e.SubscriptionTypeId).HasName("idxSubscriptionSubscriptionType");
                entity.HasOne(e => e.SubscriptionType)
                    .WithMany(pt => pt.Subscriptions)
                    .HasForeignKey(e => e.SubscriptionTypeId);
            });

            modelBuilder.Entity<Models.SubscriptionType>(entity =>
            {
                entity.ToTable("subscriptionType", "malwareDetection");
                entity.Property(e => e.Id)
                    .HasColumnType("int")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.HasKey(e => e.Id).HasName("subscriptionTypePK");

                entity.Property(e => e.Name).HasColumnName("name");
                entity.Property(e => e.Description).HasColumnName("description");
                entity.Property(e => e.Price).HasColumnName("price");
            });
            
        }

        /// <summary>
        /// Connecting configuration
        /// </summary>
        /// <param name="optionsBuilder"></param>
        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            optionsBuilder.UseNpgsql(Startup.Configuration.GetConnectionString("DefaultConnection"));
        }
    }
}